BUGS
----
- Placing the piece must not be correct for some cases, since sometimes the place where it was rendered and where they exist on the board array is not the same.

8088
----
- Not sure if operating on bytes makes subtractions any faster. Example of where I try to optimize doing this are consolePrintByte and consolePrintWord.
- I think I read somewhere that the rep prefix will not resume when an interrupt is triggered on older versions of the 8088, meaning the loop will not get completed. Is this true?

ASM
---
- Is it a good idea to push every register modified by a procedure. Maybe there are more efficient alternatives? In particular do I really need to push ax?
- Figure out how to add debug information to the build.

MASM
----
- The masm611 installation creates the files NEW-VARS.BAT and NEW-CONF.SYS in the BIN folder. The content of these files should be added to AUTOEXEC.BAT and CONFIG.SYS before running masm. Do I really need to do this? The game seems to build fine without them.
- Near and Far in procedures how are they used exactly?
- Is masm only accepting 8086 instructions? Maybe I can send a flag during assembly just in case?
- Is there an assert directive I can use?
- Do I need to put the includes as dependencies in the makefile or is there a simple way of dealing with that?
- The makefile doesn't always do the link step after assembling, so it has to be run twice, why is that exactly?
- I think I should separate the data segment into two segments with initialized and uninitialized data. This should make the executable smaller.
- Figure out an equivalent to .if DEBUG that you can use outside of segments, so you can avoid including certain files, for instance.
- Figure out if there is a way to create enums, so the defines that start with ERROR_CODE_ make more sense.
- What is the difference between ML option W2 and W3? Look in the documentation for details.
- Using /MAP with the linker creates the map in the current folder, not sure how to specify which folder I want.
- Maybe the different asm files should have its own data segment for variables they don't share with other files?
- Should I use .no87 to disable math coprocessor opcodes?
- If I use movzx, an opcode not available on the 8086, I get an error as I'm supposed to, but not when I use it inside a macro. Is this a bug in masm? Would it happen with other opcodes?
- How does the "assume" keyword works exactly? I'm trying to use it in the keyboard code but doesn't seem to work the way I expect.
- How to detect if a macro argument is a register? Should be used to optimize KEYBOARD_IS_KEY_PRESSED.
- Is there a way to have a static assert or any other way to force an assembly error on a condition? I tagged code that needs this with a comment with "static_assert(...)".
- Confirm that procedure calls are near and not far.

IBM PC
------
- How do I check before setting the video mode that the desire mode is supported?
- When I call a BIOS or DOS interrupt what registers can I expect to be saved?
- Color 3 in Palette 0 can be brown or yellow, apparently. What decides that exactly? In the web emulator color 3 looks brown and in dosbox it looks yellow.
- Make sure I understand which version of DOS is required to run the game.
- See if I can find proper documentation on how vsync works.
- Seems like the keypress has to be read before quitting, otherwise it will show up in the DOS prompt.
- Should I worry about alignment? The PC and XT will not care about it, because they use an 8088, but newer models do. Probably the code would run fast enough to not care about the penalty?
- Is there any emulator that produces accurate results for the IBM PC? Otherwise it will be very difficult to measure optmizations.
- What is the difference between BIOS_VIDEO_MODE_320_200_4_COLOR and BIOS_VIDEO_MODE_320_200_4_BW really?
- Added code to detect if you are using a CGA card, but I'm not sure if this is the right way to do it yet.
- The way that I capture the keys but don't send them to the buffer maybe it's not ideal, since ctrl-alt-del will probably not work.
- Should I make structs word aligned? This would be better for newer cpus, but bad for the 8086.
- What happens with the stack pointer on DOS if the computer has less than 64KB free? Should I create an explicit stack segment so I'm saying exactly how much memory I need to run the game?
- Should I align the data in the code segment in keyboard.asm?
- Document for bios and dos the functions that I use, so I can confirm if I'm using them properly without checking online.
- Keys 1 and 2 don't seem to work perfectly on the web emulator, is it a problem with the emulator or with my code?
- Should keyboardIntHandler enable interrupts?
- Wolfenstein 3D tells the XT keyboard to clear the key, which I'm not doing but probably should.
- Create some defines for in and out ports used in the keyboad code.
- If the game is run on a computer with an hercules video card would it be detected as an error or not?
- Is the direction flag reset when a DOS program starts? What would happen when the game is booteable?
- Do I need to create a stack segment for a com file? Will DOS put the SP at a lower address if there is not enough memory? How does DOS make sure in general there is enough memory to run the game?
- Maybe there is a faster way of setting the cursor position in consoleSetCursorColRow than calling an int?
- Confirm on real hardware what is the proper value for RENDER_CGA_STATUS_MASK_VSYNC. The books I've read disagree with the behavior I see in DOSBox.

GAME
----
- Print error codes properly when the game quits, probably this means the error number and a string describing it.
- Do I need to disable interrupts in keyboardStart when I read the previous system handler?
- Do I need to enable interrupts in keyboardSystemInt?
- Make sure I use as few DOS functions as possible, since the final goal is to make a booteable game.
- Maybe the console procedures should save all registers, they are not used for performant code so maybe it's better to go for convenience.
- Improve macros CONSOLE_SET_CURSOR_POS_IN_DX and CONSOLE_SET_CURSOR_POS.
- Macros in console are pretty long now that we don't use DOS, probably makes more sense to make them procedures. Still I could have one macro for each procedure that just calls the procedure, this way I don't have to guard them on release.
- testKeyboardScancode had branches commented because the console macros are too long, revert change when they are changed to procedures.
- PrintChar doesn't scroll text anymore when reaching the bottom, since we don't use DOS now.
- SetCursorPos doesn't take int account that in text mode the are twice as many columns.
- It would be better for the drawing functions like line and rect that the low coordinate is stored in a register that can be used with lea, so it's faster to compute the high.
- Modify CONSOLE_SET_CURSOR_POS so it does xor dx,dx when col and row are zero.
- Added one .gitignore file per folder inside obj and bin, this is needed because git doesn't backup folders unless there are files in them, and neither ml nor link will create the folder by itself. Maybe the creation of these folders could be done in the makefile?

LINKS
-----
- https://www.pcjs.org/machines/pcx86/ibm/5160/cga/
- https://www.pcjs.org/machines/pcx86/ibm/5170/cga/
- https://stanislavs.org/helppc/int_table.html (interrupts)
- http://www.delorie.com/djgpp/doc/rbinter/ (interrupts)
- http://www.ctyme.com/intr/int.htm (interrupts)
- https://www.phatcode.net/articles.php
- http://www.phatcode.net/res/224/files/html/index.html (Michael Abrash's Graphics Programming Black Book Special Edition)
- http://qzx.com/pc-gpe/ or http://bespin.org/~qz/pc-gpe/
- https://stackoverflow.com/questions/37019711/detect-receive-multiple-key-presses-at-the-same-time-in-dos
- http://www.verycomputer.com/viewlist_12_873.htm (msdos programming forum)
- https://www.youtube.com/watch?v=BCSaKuqPrf4 (PCjr patching tutorial)
- https://www.vogons.org/viewtopic.php?f=9&t=94972 (PC Emulation, MartyPC)
- https://xlogicx.net/Boot_Sector_Graphical_Programming_-_Tutorial.html
- https://www.youtube.com/@chillruns6221/videos

GAMES
-----
- https://archive.org/details/msdos_Snack_Attack_II_1982 (by Michael Abrash)
- https://www.youtube.com/watch?v=aeoBwV7NwSc (Big Top, by Michael Abrash)
- https://www.youtube.com/watch?v=lMJzf5iOqwg (Cosmic Crusader, by Michael Abrash)
- https://www.youtube.com/watch?v=HiGDcmbUT_I (Space Commanders, a Space Invaders clone)
- https://www.youtube.com/watch?v=wIJasD3FjPU (Space Strike, by Michael Abrash)
- https://www.youtube.com/watch?v=KVjw7jGZgdU (Tetris)
- https://github.com/jhhoward/WolfensteinCGA

GAME BINARIES
-------------
https://www.myabandonware.com/game/space-commanders-ii-6n
https://www.myabandonware.com/game/tetris-1sp
https://www.myabandonware.com/game/tetris-dj
https://www.myabandonware.com/game/tetris-classic-1j3